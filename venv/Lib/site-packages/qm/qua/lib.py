import random
import qm.program.expressions as _exp
from qm.qua._dsl import _Expression, _to_expression, declare, assign


def _library_function(lib_name, func_name):
    def library_decorator(function):
        def wrapper(*args, **kwargs):
            new_args = function(*args, **kwargs)
            return _Expression(_exp.lib_func(lib_name, func_name, *[_to_expression(x) for x in new_args]))

        return wrapper

    return library_decorator


class Math:

    @staticmethod
    @_library_function('math', 'sin2pi')
    def sin2pi(x):
        """
        Compute the sin of a 2*pi*x on hardware
        :param x: the angle in radians
        :return:
        """
        return x,

    @staticmethod
    @_library_function('math', 'cos2pi')
    def cos2pi(x):
        """
        Compute the cos of a 2*pi*x on hardware
        :param x: the angle in radians
        :return:
        """
        return x,

    @staticmethod
    @_library_function('math', 'abs')
    def abs(x):
        """
        Compute the absolute value of x on hardware
        :param x: a QUA variable
        :return:
        """
        return x,

    @staticmethod
    @_library_function('math', 'sin')
    def sin(x):
        """
        Compute the sin of a x on hardware
        :param x: the angle in radians
        :return:
        """
        return x,

    @staticmethod
    @_library_function('math', 'cos')
    def cos(x):
        """
        Compute the cos of a x on hardware
        :param x: the angle in radians
        :return:
        """
        return x,

    @staticmethod
    @_library_function('math', 'sum')
    def sum(x):
        """
        Compute sum of an array x on hardware
        :param x: a QUA array
        :return: sum of the array, has same type as x
        """
        return x,

    @staticmethod
    @_library_function('math', 'max')
    def max(x):
        """
        Compute max of an array x on hardware
        :param x: a QUA array
        :return: max value of the array, has same type as x
        """
        return x,

    @staticmethod
    @_library_function('math', 'min')
    def min(x):
        """
        Compute min of an array x on hardware
        :param x: a QUA array
        :return: min value of the array, has same type as x
        """
        return x,

    @staticmethod
    @_library_function('math', 'argmax')
    def argmax(x):
        """
        Return the index of the maximum of an array on hardware
        :param x: a QUA array
        :return: index of maximum value of array
        """
        return x,

    @staticmethod
    @_library_function('math', 'argmin')
    def argmin(x):
        """
        Return the index of the minimum of an array on hardware
        :param x: a QUA array
        :return: index of minimum value of array
        """
        return x,

    @staticmethod
    @_library_function('math', 'dot')
    def dot(x, y):
        """
        Calculates a dot product of two QUA arrays of identical size

        :Example:

        >>> assign(c, dot(a, b))
        """
        return x, y


class Cast:

    @staticmethod
    @_library_function('cast', 'mul_int_by_fixed')
    def mul_int_by_fixed(x, y):
        """
        Multiplies an int x by a fixed y, returning an int
        :param x: a QUA integer
        :param y: a QUA fixed
        :return: a QUA int
        """
        return x, y

    @staticmethod
    @_library_function('cast', 'mul_fixed_by_int')
    def mul_fixed_by_int(x, y):
        """
        Multiplies a fixed x by an int y, returning a fixed
        :param x: a QUA fixed
        :param y: a QUA int
        :return: a QUA fixed
        """
        return x, y

    @staticmethod
    @_library_function('cast', 'to_int')
    def to_int(x):
        """
        Casts a variable to int. Supports int, fixed or bool
        :param x: a QUA variable
        :return: a QUA expression with int type
        """
        return x,

    @staticmethod
    @_library_function('cast', 'to_fixed')
    def to_fixed(x):
        """
        Casts a variable to fixed. Supports int, fixed or bool
        :param x: a QUA variable
        :return: a QUA expression with fixed type
        """
        return x,

    @staticmethod
    @_library_function('cast', 'to_bool')
    def to_bool(x):
        """
        Casts a variable to bool. Supports int, fixed or bool
        :param x: a QUA variable
        :return: a QUA expression with bool type
        """
        return x,


class Util:

    @staticmethod
    @_library_function('util', 'cond')
    def cond(condition, true_result, false_result):
        """
        Quick conditional operation. This is equivalent to a ternary operator available in some languges:
        i.e. a ? b : c, meaning 'b' if 'a' is true, or 'c' if 'a' is false.
        There is less computation overhead (less latency) when running this operation relative to the if_ conditional.
        :Example:

        >>> assign(b, cond(a > b, c, d))

        """
        return condition, true_result, false_result


class Random:

    def __init__(self, seed=None):
        """
        A class for generating pseudo-random numbers in QUA

        :param seed: Optional. An integer seed for the pseudo-random number generator.
        """
        self._seed = declare(int, value=seed if seed is not None else random.randrange((1 << 28) - 1))

    def set_seed(self, exp):
        """
        Set the seed for the pseudo-random number generator
        :param exp: a QUA expression
        """
        assign(self._seed, exp)

    @_library_function('random', 'rand_int')
    def rand_int(self, max_int):
        """
        Returns a pseudorandom integer in range [0, max_int)
        :param max_int: maximum value

         Can also pass a maximum value as second parameter as in example:
        :Example:
        >>> a= Random()
        >>> assign(b,a.rand_int(max_int))
        """
        return self._seed, max_int

    @_library_function('random', 'rand_fixed')
    def rand_fixed(self):
        """
        Returns a pseudorandom fixed in range [0.0, 1.0)

         Can also pass a maximum value as second parameter as in example:
        :Example:
        >>> a= Random()
        >>> assign(b,a.rand_fixed())
        """
        return self._seed,
